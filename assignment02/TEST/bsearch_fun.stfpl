/*
**  Find integer square roots based on binary search
*/

/* ****** ****** */

//
// In the book "Programming in ATS", there is an example in the chapter
// named 'Functions' that implements the integer square root function
// based on binary search. Please translate the implementation written
// in ATS into STFPL.
//

/* ****** ****** */

/* please do your implementation in STFPL */

let
  val rec bsearch_fun: ((int -> int), int, int, int) -> int = 
    lam (f: int -> int, x0: int, lb: int, ub: int) =>
      if lb <= ub then let
        val mid = lb + (ub - lb) / 2
      in
        if x0 < f (mid) then
          bsearch_fun (f, x0, lb, mid - 1)
        else
          bsearch_fun (f, x0, mid + 1, ub)
      end else ub
        
  val ISQRT_MAX = 65535
  val isqrt: int -> int = lam (x: int) => 
    bsearch_fun (lam (i) => i * i, x, 0, ISQRT_MAX)

  val _ = print_int isqrt (0)
  val _ = print "\n"
  val _ = print_int isqrt (1)
  val _ = print "\n"
  val _ = print_int isqrt (2)
  val _ = print "\n"
  val _ = print_int isqrt (8)
  val _ = print "\n"
  val _ = print_int isqrt (17)
  val _ = print "\n"
in
  print_int isqrt (25)
end

/* ****** ****** */

/* end of [bsearch_fun.stfpl] */
