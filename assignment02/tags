!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.6	//
a0rg	absyn.sats	/^and a0rg = @{$/;"	kind: declaration
oftype	trans1.dats	/^extern fun oftype (Gamma: ctx, e0: e0xp): (e1xp, tyerr_pool)$/;"	kind: declaration
oftype	trans1.dats	/^implement oftype (Gamma, e0) = let$/;"	kind: implementation
oftype_valdec	trans1.dats	419;"	kind:macro

symenv_insert	symbol.sats	/^symenv_insert (env: symenv_t a, sym: symbol_t, x: a): symenv_t a$/;" kind declaration
theConstTypFind	trans1.dats	/^extern fun theConstTypFind (opr: opr): t1yp$/;"	kind: declaration
theConstTypFind	trans1.dats	/^theConstTypFind (opr) = let$/;"	kind: implementation
trans1_typ	trans1.sats	/^fun trans1_typ (_: $Absyn.t0yp): t1yp$/;"	kind: declaration
trans1_typ	trans1.dats	/^trans1_typ (t) = aux (t) where {$/;"	kind: implementation
typcheck	trans1.dats	/^extern fun typcheck (Gamma: ctx, e0: e0xp, t1: t1yp): (e1xp, tyerr_pool)$/;"	kind: declaration
typcheck	trans1.dats	/^implement typcheck (Gamma, e0, t1) = let$/;"	kind: implementation



